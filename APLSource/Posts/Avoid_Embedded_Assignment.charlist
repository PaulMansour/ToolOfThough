DRAFT

# [Avoid Embedded Assignment](/posts/avoid-embedded-assignment)

# March 8, 2023

Unless one is doing code golf, or something very special, embedded assignment should be avoided.

It is seen all the time in huge, loopy, control-structured functions, where its only purpose is to
save a line of code, which given that the function is huge and loopy and full of control structures
seems rather ridiculous. It is much easier to read code where all the assignments are on the left
margin.

Now consider this bit of code that turned up when converting some trad functions to dfns.
First the trad function:

~~~
      z←Trad;f;a;w
      f←+
      a←2
      z←a f w←1 2 3
~~~

And then this seemingly equivalent dfn:

~~~
      Dfn←{
           f←+
           a←2
           z←a f w←1 2 3
           z
      }    
~~~

And their respective results:

~~~
      Trad
3 4 5
      Dfn 0
1 2 3
~~~

It is not clear to me if this is a bug or a feature of dfns (I'll leave that up the folks at Dyalog).
My guess is that it might be an unavoidable feature of the way dfns implements assignment.
For example, dfns allow the overwriting of a class 3 name with a class 2 name, unlike trad functions.
But maybe not. Conider that this coding:

~~~
     Dfn2←{
           a←2
           z←a+w←1 2 3
           z
     }

~~~

works like the trad function:

~~~
     Dfn2 0
3 4 5
~~~

Regardless, it's just another reason to avoid embedded assignment.  

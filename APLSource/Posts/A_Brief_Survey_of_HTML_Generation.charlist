DRAFT

# [A Brief Survey of HTML Generation Techniques](/posts/a-brief-survey-of-html-generation-techniques)

## January 15, 2025

David Ford, in a [2017 post](https://codeburst.io/80-of-my-coding-is-doing-this-or-why-templates-are-dead-b640fc149e22),
sums up the various ways of generating HTML. Ford identifies 4 techniques:
string building, imperative tree building, template languages, and internal DSLs,
settling on the last as the best way to do it. We agree; we have dismissed
[string building](/posts/a-document-object-model-in-apl) and [templates](/posts/html-templates).
As for tree building, as Ford notes, internal DSLs are
not fundamentally different, just better syntax. The result is the same: 
a tree of elements in the host language that mimics the DOM in the browser.

Let's take a look at few different DSL implementations in Go, Python, and Scala and see how they compare
to Abacus in APL. 

First up is templ, a [templating language for Go](https://templ.guide/).
Here is a simple templ file from their documentation:   

~~~
package main

templ headerTemplate(name string) {
  <header data-testid="headerTemplate">
    <h1>{ name }</h1>
  </header>
}
~~~

While this looks suspiciously like the definition of a function named `headerTemplate`, it's
actually a template for a function. It must be run through a template engine
that generates an eponymously named actual Go function. This function
takes a string as its argument and returns a temple `Component` object.
A Go function can then call this generated function:

~~~
func main() {
\tcomponent := headerTemplate("Hello World!")
\tcomponent.Render(context.Background(), os.Stdout)
}
~~~

The component object has a Render method that returns the HTML:

~~~
<header data-testid="headerTemplate">
  <h1>Hello World!</h1>
</header>
~~~

The temple approach combines templating with a DOM. It is not clear to us
why one wouldn't just write Go code directly and dispense with templating.
And indeed, up next is the Go library [htmgo](https://htmgo.dev), which does just that:

~~~
func IndexPage(ctx *h.RequestContext) *h.Page {
  now := time.Now()
  return h.NewPage(
    h.Div(
      h.Class("flex gap-2"),
      h.TextF("the current time is %s", now.String())
    )
  )
}
~~~

Go functions are used directly to create HTML elements, no ending tags needed.
All of the following frameworks or packages follow this pattern: using
functions in the host language to create HTML element objects of some sort.   

Next is the python library [pytp](https://htpy.dev/), where this:

~~~
from htpy import body, h1, head, html, li, title, ul

menu = ["egg+bacon", "bacon+spam", "eggs+spam"]

print(
    html[
        head[title["Today's menu"]],
        body[
            h1["Menu"],
            ul(".menu")[(li[item] for item in menu)],
        ],
    ]
)
~~~

produces this: 

~~~
<!DOCTYPE html>
<html>
  <head>
    <title>Today's menu</title>
  </head>
  <body>
    <h1>Menu</h1>
    <ul class="menu">
      <li>egg+bacon</li>
      <li>bacon+spam</li>
      <li>eggs+spam</li>
    </ul>
  </body>
</html>
~~~

Another Python approach is taken by [FastHTML](https://fastht.ml/). FastHTML uses
something called FTs or "FastTag" components. An FT is simply a node in a Python DOM,
though they don't discuss it that way. Interestingly, an FT is not
encapsulted as an object with properties and methods, but is a three-element array where the first element
is the tag, the second element the content, and the third element are the attributes. In FastHTML, this:

~~~
from fasthtml.common import *
page = Html(
    Head(Title('Some page')),
    Body(Div('Some text, ', A('A link', href='https://example.com'), Img(src="https://placehold.co/200"), cls='myclass')))
print(to_xml(page))
~~~

produces this:

~~~
<!doctype html></!doctype>
<html>
  <head>
    <title>Some page</title>
  </head>
  <body>
    <div class="myclass">
Some text, 
      <a href="https://example.com">A link</a>
      <img src="https://placehold.co/200">
    </div>
  </body>
</html>
~~~

[ScalaTags](https://com-lihaoyi.github.io/scalatags/) is an HTML construction library for Scala
that looks like this:  

~~~
html(
  head(
    script("some script")
  ),
  body(
    h1("This is my title"),
    div(
      p("This is my first paragraph"),
      p("This is my second paragraph")
    )
  )
)
~~~

All of these appoaches are very similar. With minor differences,
the code looks more or less the same. The construction technique
is not that different from handwriting HTML; nesting   



